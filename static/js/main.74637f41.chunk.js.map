{"version":3,"sources":["CalculatorContext.js","Overview.js","Node.js","Cluster.js","Embodiment.js","App.js","index.js"],"names":["ascensionData","require","embodimentNames","clusters","root","nodes","rewards","embodiments","forEach","embodiment","description","toUpperCase","substring","cluster","name","push","CalculatorContext","React","createContext","isNodeSelected","node","selectedNodes","index","isNodeSelectable","state","clusterAvailable","isClusterAvailable","isClusterComplete","i","length","requirements","points","reducer","action","newNodes","newPoints","type","subnode","bonusPoint","isNodeDeselectable","prevBonusPoint","clusterNames","nodeId","split","clusterName","isValidState","CalculatorProvider","children","useReducer","force","entropy","form","inertia","life","dispatch","Provider","value","VALUE_MODIFIER_REGEX","categories","header","regex","Overview","calculator","useContext","className","valueModifiers","textModifiers","addModifier","line","map","s","trim","modifier","match","Number","subnodes","modifiers","Object","keys","Math","round","modifiersByCategory","c","otherModifiers","hasCategory","category","toLowerCase","categoryElements","m","BONUS_REGEX","Node","props","isSelected","isSelectable","selectedSubnode","getSelectedSubnode","onClick","tooltip","classNames","selected","bind","this","data-tip","join","replace","selectable","Cluster","isAvailable","isComplete","available","complete","Embodiment","App","effect","multiline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qq5EAEMA,EAAgBC,EAAQ,IACjBC,EAAkB,CAAC,QAAS,UAAW,OAAQ,UAAW,QAC1DC,EAAW,CAAEC,KAAM,CAAEC,MAAO,GAAIC,QAAS,KACzCC,EAAc,GAC3BL,EAAgBM,SACd,SAACC,GAAD,OACGN,EAASC,KAAKC,MAAMI,GAAc,CACjCC,YAAY,MAAD,OAAQD,EAAW,GAAGE,eAAtB,OAAsCF,EAAWG,UAAU,GAA3D,SAGjBV,EAAgBM,SAAQ,SAACC,GAAD,OAAiBF,EAAYE,GAAc,M,oBAE/CT,G,IAApB,2BAAmC,CAAC,IAA3Ba,EAA0B,QACjCV,EAASU,EAAQC,MAAQD,EACzBN,EAAYM,EAAQJ,YAAYM,KAAKF,I,8BAGhC,IAAMG,EAAoBC,IAAMC,cAAc,MAE9C,SAASC,EAAeC,EAAMC,GACnC,MAAO,UAAGD,EAAKP,QAAR,YAAmBO,EAAKE,SAAWD,EAGrC,SAASE,EAAiBH,EAAMI,GACrC,GAAoB,QAAhBJ,EAAKP,QAAmB,OAAO,EAEnC,IACMY,EAAmBC,EADTvB,EAASiB,EAAKP,SACuBW,GACrD,OACGC,GAAkC,GAAdL,EAAKE,OACzBG,GACCN,EAAe,CAAEN,QAASO,EAAKP,QAASS,MAAOF,EAAKE,MAAQ,GAAKE,EAAMnB,OAYtE,SAASsB,EAAkBd,EAASQ,GACzC,IAAK,IAAIO,EAAI,EAAGA,EAAIf,EAAQR,MAAMwB,OAAQD,IACxC,IAAKT,EAAe,CAAEN,QAASA,EAAQC,KAAMQ,MAAOM,GAAKP,GAAgB,OAAO,EAGlF,OAAO,EAGF,SAASK,EAAmBb,EAASW,GAC1C,IAAK,IAAIf,KAAcI,EAAQiB,aAC7B,GAAIN,EAAMO,OAAOtB,GAAcI,EAAQiB,aAAarB,GAAa,OAAO,EAG1E,OAAO,EAqBT,SAASuB,EAAQR,EAAOS,GACtB,IAAMC,EAAQ,eAAQV,EAAMnB,OACtB8B,EAAS,eAAQX,EAAMO,QACvBX,EAAOa,EAAOb,KACdP,EAAUV,EAASiB,EAAKP,SAE9B,OAAQoB,EAAOG,MACb,IAAK,SACH,IAAKb,EAAiBH,EAAMI,GAAQ,MAGpC,GAFAU,EAAS,GAAD,OAAId,EAAKP,QAAT,YAAoBO,EAAKE,QAAWF,EAAKiB,QAE7CV,EAAkBd,EAASqB,GAC7B,IAAK,IAAIzB,KAAcI,EAAQP,QAC7B6B,EAAU1B,IAAeI,EAAQP,QAAQG,GAIzCW,EAAKkB,aACPH,EAAUf,EAAKkB,aAAe,GAGhC,MAEF,IAAK,WACH,IAlEN,SAA4BlB,EAAMI,GAChC,OAAQL,EAAe,CAAEN,QAASO,EAAKP,QAASS,MAAOF,EAAKE,MAAQ,GAAKE,EAAMnB,OAiEtEkC,CAAmBnB,EAAMI,GAAQ,MAEtC,GAAIX,GAAWc,EAAkBd,EAASqB,GACxC,IAAK,IAAIzB,KAAcI,EAAQP,QAC7B6B,EAAU1B,IAAeI,EAAQP,QAAQG,GAIzCW,EAAKkB,aACPH,EAAUf,EAAKkB,aAAe,UAGzBJ,EAAS,GAAD,OAAId,EAAKP,QAAT,YAAoBO,EAAKE,QACxC,MAEF,IAAK,WACCF,EAAKkB,aACPH,EAAUf,EAAKkB,aAAe,GAE5BlB,EAAKoB,iBACPL,EAAUf,EAAKoB,iBAAmB,GAGpCN,EAAS,GAAD,OAAId,EAAKP,QAAT,YAAoBO,EAAKE,QAAWF,EAAKiB,QAIrD,OArEF,YAA0C,IAAlBhC,EAAiB,EAAjBA,MAAO0B,EAAU,EAAVA,OACzBU,EAAe,GACnB,IAAK,IAAIC,KAAUrC,EACjBoC,EAAaC,EAAOC,MAAM,KAAK,KAAM,EAGvC,IAAK,IAAIC,KAAeH,EAAc,CACpC,IAAM5B,EAAUV,EAASyC,GACzB,IAAK,IAAInC,KAAcI,EAAQiB,aAC7B,GAAIC,EAAOtB,GAAcI,EAAQiB,aAAarB,GAC5C,OAAO,EAKb,OAAO,EAsDFoC,CAAa,CAAExC,MAAO6B,EAAUH,OAAQI,IACtC,CAAE9B,MAAO6B,EAAUH,OAAQI,GADgCX,EAI7D,SAASsB,EAAT,GAA2C,IAAbC,EAAY,EAAZA,SAAY,EACrBC,qBAAWhB,EAAS,CAC5C3B,MAAO,GACP0B,OAAQ,CACNkB,MAAO,EACPC,QAAS,EACTC,KAAM,EACNC,QAAS,EACTC,KAAM,KARqC,mBACxC7B,EADwC,KACjC8B,EADiC,KAY/C,OACE,kBAACtC,EAAkBuC,SAAnB,CAA4BC,MAAO,CAAEhC,QAAO8B,aAAaP,GChJ7D,IAAMU,EAAuB,kBAEvBC,EAAa,CACjB,CACEC,OAAQ,aACRC,MAAO,2EAET,CACED,OAAQ,SACRC,MAAO,qMAET,CACED,OAAQ,QACRC,MAAO,qHAET,CACED,OAAQ,cACRC,MAAO,mGAET,CACED,OAAQ,UACRC,MAAO,mCAET,CACED,OAAQ,cACRC,MAAO,+CAIJ,SAASC,IACd,IADyB,EACnBC,EAAaC,qBAAW/C,GACxBQ,EAAQsC,EAAWtC,MAEnBO,EAAS,GAJU,cAKF7B,GALE,IAKzB,2BAAwC,CAAC,IAAhCO,EAA+B,QACtCsB,EAAOhB,KAAK,yBAAKiD,UAAS,gBAAWvD,IAAeqD,EAAWtC,MAAMO,OAAOtB,MANrD,8BASzB,IAAMwD,EAAiB,GACjBC,EAAgB,GAEtB,SAASC,EAAYC,GACnBA,EACGzB,MAAM,WACN0B,KAAI,SAACC,GAAD,OAAOA,EAAEC,UACb/D,SAAQ,SAACgE,GACR,IAAIC,EAAQD,EAASC,MAAMhB,GAC3B,GAAIgB,EAAO,CACT,IAAM/D,EAAc+D,EAAM,GACpBjB,EAAQkB,OAAOD,EAAM,IAC3BR,EAAevD,IAAgBuD,EAAevD,IAAgB,GAAK8C,OAEnEU,EAAcnD,KAAKyD,MAK3B,IAAK,IAAI9B,KAAUlB,EAAMnB,MAAO,CAAC,IAAD,EACPqC,EAAOC,MAAM,KADN,mBACzB9B,EADyB,KAChBS,EADgB,KAGxBF,EAAOjB,EAASU,GAASR,MAAMiB,GAC/Be,EAAUb,EAAMnB,MAAMqC,GAEtB8B,EAAWpD,EAAKV,YAAY6D,OAE9BC,GAAUL,EAAYK,IACV,GAAZnC,GACF8B,EAAY/C,EAAKuD,SAAStC,IAM9B,IAFA,IAAMuC,EAAY,GAElB,MAAwBC,OAAOC,KAAKb,GAApC,eAAqD,CAAhD,IAAIvD,EAAW,KACd8C,EAAQS,EAAevD,GAC3BkE,EAAU7D,KAAV,WAAmBgE,KAAKC,MAAc,GAARxB,GAAc,IAA5C,OAAiD9C,IAGnDkE,EAAU7D,KAAV,MAAA6D,EAAkBV,GAKlB,IAHA,IAAIe,EAAsBvB,EAAWW,KAAI,SAACa,GAAD,MAAO,MAC1CC,EAAiB,GAEvB,MAAqBP,EAArB,eAAgC,CAG9B,IAHG,IAAIJ,EAAQ,KACXY,GAAc,EAETxD,EAAI,EAAGA,EAAI8B,EAAW7B,OAAQD,IAAK,CAC1C,IAAMyD,EAAW3B,EAAW9B,GAE5B,GAAI4C,EAASc,cAAcb,MAAMY,EAASzB,OAAQ,CAChDwB,GAAc,EACdH,EAAoBrD,GAAGb,KAAKyD,GAC5B,OAICY,GACHD,EAAepE,KAAKyD,GAKxB,IADA,IAAMe,EAAmB,GAChB3D,EAAI,EAAGA,EAAI8B,EAAW7B,OAAQD,IAAK,CAC1C,IAAMyD,EAAW3B,EAAW9B,GACxBqD,EAAoBrD,GAAGC,QACzB0D,EAAiBxE,KACf,yBAAKiD,UAAU,YACb,yBAAKA,UAAU,mBAAmBqB,EAAS1B,OAA3C,KACCsB,EAAoBrD,GAAGyC,KAAI,SAACmB,GAAD,OAC1B,6BAAMA,QAkBhB,OAXIL,EAAetD,QACjB0D,EAAiBxE,KACf,yBAAKiD,UAAU,YACb,yBAAKA,UAAU,mBAAf,kBACCmB,EAAed,KAAI,SAACmB,GAAD,OAClB,6BAAMA,QAOZ,yBAAKxB,UAAU,YACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,eAAf,wBADF,IAC2DjC,GAE3D,yBAAKiC,UAAU,eAAf,gBAA2Ca,OAAOC,KAAKtD,EAAMnB,OAAOwB,QAEpE,yBAAKmC,UAAU,eACb,yBAAKA,UAAU,qBAAf,qBACCuB,I,oBCjIHE,EAAc,yCAEb,SAASC,EAAKC,GACnB,IAAM7B,EAAaC,qBAAW/C,GACxB4E,EAAazE,EAAewE,EAAO7B,EAAWtC,MAAMnB,OACpDwF,GAAgBD,GAAcrE,EAAiBoE,EAAO7B,EAAWtC,OACjEsE,EAAkBF,GFyBnB,SAA4BxE,EAAMC,GACvC,OAAOA,EAAc,GAAD,OAAID,EAAKP,QAAT,YAAoBO,EAAKE,QE1BPyE,CAAmBJ,EAAO7B,EAAWtC,MAAMnB,OAC3Ee,EAAOjB,EAASwF,EAAM9E,SAASR,MAAMsF,EAAMrE,OAEjD,SAAS0E,EAAQ3D,GACf,IAAIC,EAEAmC,EAAQrD,EAAKV,YAAY+D,MAAMgB,GAInC,IAHgB,GAAZpD,GAAkBoC,IAAOA,EAAQrD,EAAKuD,SAAStC,GAASoC,MAAMgB,IAC9DhB,IAAOnC,EAAamC,EAAM,GAAGa,eAE5BM,EAMH,IAAgB,GAAZvD,GAAiBA,GAAWyD,EAAiB,CAC/C,IAAItD,EACAiC,EAAQrD,EAAKuD,SAASmB,GAAiBrB,MAAMgB,GAC7ChB,IAAOjC,EAAiBiC,EAAM,GAAGa,eAErCxB,EAAWR,SAAS,CAClBlB,KAAM,WACNhB,KAAK,aAAGiB,UAASC,aAAYE,kBAAmBmD,UAGlD7B,EAAWR,SAAS,CAClBlB,KAAM,WACNhB,KAAK,aAAGkB,cAAeqD,UAjB3B7B,EAAWR,SAAS,CAClBlB,KAAM,SACNhB,KAAK,aAAGiB,UAASC,cAAeqD,KAqBtC,IAAMM,EAAU,GAGhB,GAFI7E,EAAKV,YAAY6D,QAAQ0B,EAAQlF,KAAKK,EAAKV,YAAY6D,QAEvDnD,EAAKuD,UAAYvD,EAAKuD,SAAS9C,OAAQ,CAEzC,IADA,IAAM8C,EAAW,GACR/C,EAAI,EAAGA,EAAIR,EAAKuD,SAAS9C,OAAQD,IACxCqE,EAAQlF,KAAR,UAAgBa,EAAI,EAApB,aAA0BR,EAAKuD,SAAS/C,GAAG2C,SAC3CI,EAAS5D,KACP,yBACEiD,UAAWkC,IAAW,UAAW,CAAEC,SAAUP,GAAcE,GAAmBlE,IAC9EoE,QAASA,EAAQI,KAAKC,KAAMzE,IAE3BA,EAAI,IAKX,OACE,yBACE0E,WAAUL,EAAQM,KAAK,UAAUC,QAAQ,MAAO,SAChDxC,UAAWkC,IAAW,gBAAiB,CAAEC,SAAUP,EAAYa,WAAYZ,KAE1ElB,GAKP,OACE,yBACE2B,WAAUL,EAAQM,KAAK,UAAUC,QAAQ,MAAO,SAChDxC,UAAWkC,IAAW,OAAQ,CAAEC,SAAUP,EAAYa,WAAYZ,IAClEG,QAASA,EAAQI,KAAKC,MAAO,KCvE5B,SAASK,EAAQf,GACtB,IAAMtF,EAAQ,GACRQ,EAAUV,EAASwF,EAAM7E,MACzBgD,EAAaC,qBAAW/C,GACxB2F,EAAcjF,EAAmBb,EAASiD,EAAWtC,OACrDoF,EAAaD,GAAehF,EAAkBd,EAASiD,EAAWtC,MAAMnB,OAExEyB,EAAe,GACrB,IAAK,IAAIrB,KAAcI,EAAQiB,aAC7BA,EAAaf,KACX,yBAAKiD,UAAS,gBAAWvD,IAAeI,EAAQiB,aAAarB,KAIjE,IAAMH,EAAU,GAChB,IAAK,IAAIG,KAAcI,EAAQP,QAC7BA,EAAQS,KAAK,yBAAKiD,UAAS,gBAAWvD,IAAeI,EAAQP,QAAQG,KAGvE,IAAK,IAAImB,EAAI,EAAGA,EAAIf,EAAQR,MAAMwB,OAAQD,IACxCvB,EAAMU,KAAK,kBAAC2E,EAAD,CAAM7E,QAAS8E,EAAM7E,KAAMQ,MAAOM,KAG/C,OACE,yBAAKoC,UAAWkC,IAAW,UAAW,CAAEW,UAAWF,EAAaG,SAAUF,KACxE,yBAAK5C,UAAU,uBAAuBlC,GACtC,yBAAKkC,UAAU,gBAAf,IAAgC2B,EAAM7E,KAAtC,KACA,yBAAKkD,UAAU,kBAAkB1D,GACjC,yBAAK0D,UAAU,SAAS3D,ICjCvB,SAAS0G,EAAWpB,GACzB,IADgC,EAC1BxF,EAAW,GACXM,EAAaF,EAAYoF,EAAM7E,MAFL,cAIZL,GAJY,IAIhC,2BAAgC,CAAC,IAAxBI,EAAuB,QAC9BV,EAASY,KAAK,kBAAC2F,EAAD,CAAS5F,KAAMD,EAAQC,SALP,8BAQhC,OACE,yBAAKkD,UAAU,cACb,yBAAKA,UAAU,mBACZ2B,EAAM7E,KACP,kBAAC4E,EAAD,CAAM7E,QAAQ,OAAOS,MAAOqE,EAAM7E,QAEpC,yBAAKkD,UAAU,YAAY7D,I,WCIlB6G,MAhBf,WACE,OACE,kBAAClE,EAAD,KACE,yBAAKkB,UAAU,cACb,yBAAKA,UAAU,eACZ9D,EAAgBmE,KAAI,SAAC5D,GAAD,OACnB,kBAACsG,EAAD,CAAYjG,KAAML,QAGtB,kBAACoD,EAAD,OAEF,kBAAC,IAAD,CAAcG,UAAU,UAAUiD,OAAO,QAAQC,UAAU,WCbjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.74637f41.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nconst ascensionData = require('./ascension.json');\r\nexport const embodimentNames = ['force', 'entropy', 'form', 'inertia', 'life'];\r\nexport const clusters = { root: { nodes: {}, rewards: {} } };\r\nexport const embodiments = {};\r\nembodimentNames.forEach(\r\n  (embodiment) =>\r\n    (clusters.root.nodes[embodiment] = {\r\n      description: `+1 ${embodiment[0].toUpperCase()}${embodiment.substring(1)}.`,\r\n    })\r\n);\r\nembodimentNames.forEach((embodiment) => (embodiments[embodiment] = []));\r\n\r\nfor (let cluster of ascensionData) {\r\n  clusters[cluster.name] = cluster;\r\n  embodiments[cluster.embodiment].push(cluster);\r\n}\r\n\r\nexport const CalculatorContext = React.createContext(null);\r\n\r\nexport function isNodeSelected(node, selectedNodes) {\r\n  return `${node.cluster}.${node.index}` in selectedNodes;\r\n}\r\n\r\nexport function isNodeSelectable(node, state) {\r\n  if (node.cluster == 'root') return true;\r\n\r\n  const cluster = clusters[node.cluster];\r\n  const clusterAvailable = isClusterAvailable(cluster, state);\r\n  return (\r\n    (clusterAvailable && node.index == 0) ||\r\n    (clusterAvailable &&\r\n      isNodeSelected({ cluster: node.cluster, index: node.index - 1 }, state.nodes))\r\n  );\r\n}\r\n\r\nfunction isNodeDeselectable(node, state) {\r\n  return !isNodeSelected({ cluster: node.cluster, index: node.index + 1 }, state.nodes);\r\n}\r\n\r\nexport function getSelectedSubnode(node, selectedNodes) {\r\n  return selectedNodes[`${node.cluster}.${node.index}`];\r\n}\r\n\r\nexport function isClusterComplete(cluster, selectedNodes) {\r\n  for (let i = 0; i < cluster.nodes.length; i++) {\r\n    if (!isNodeSelected({ cluster: cluster.name, index: i }, selectedNodes)) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function isClusterAvailable(cluster, state) {\r\n  for (let embodiment in cluster.requirements) {\r\n    if (state.points[embodiment] < cluster.requirements[embodiment]) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction isValidState({ nodes, points }) {\r\n  let clusterNames = {};\r\n  for (let nodeId in nodes) {\r\n    clusterNames[nodeId.split('.')[0]] = true;\r\n  }\r\n\r\n  for (let clusterName in clusterNames) {\r\n    const cluster = clusters[clusterName];\r\n    for (let embodiment in cluster.requirements) {\r\n      if (points[embodiment] < cluster.requirements[embodiment]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  const newNodes = { ...state.nodes };\r\n  const newPoints = { ...state.points };\r\n  const node = action.node;\r\n  const cluster = clusters[node.cluster];\r\n\r\n  switch (action.type) {\r\n    case 'select':\r\n      if (!isNodeSelectable(node, state)) break;\r\n      newNodes[`${node.cluster}.${node.index}`] = node.subnode;\r\n\r\n      if (isClusterComplete(cluster, newNodes)) {\r\n        for (let embodiment in cluster.rewards) {\r\n          newPoints[embodiment] += cluster.rewards[embodiment];\r\n        }\r\n      }\r\n\r\n      if (node.bonusPoint) {\r\n        newPoints[node.bonusPoint] += 1;\r\n      }\r\n\r\n      break;\r\n\r\n    case 'deselect':\r\n      if (!isNodeDeselectable(node, state)) break;\r\n\r\n      if (cluster && isClusterComplete(cluster, newNodes)) {\r\n        for (let embodiment in cluster.rewards) {\r\n          newPoints[embodiment] -= cluster.rewards[embodiment];\r\n        }\r\n      }\r\n\r\n      if (node.bonusPoint) {\r\n        newPoints[node.bonusPoint] -= 1;\r\n      }\r\n\r\n      delete newNodes[`${node.cluster}.${node.index}`];\r\n      break;\r\n\r\n    case 'reselect':\r\n      if (node.bonusPoint) {\r\n        newPoints[node.bonusPoint] += 1;\r\n      }\r\n      if (node.prevBonusPoint) {\r\n        newPoints[node.prevBonusPoint] -= 1;\r\n      }\r\n\r\n      newNodes[`${node.cluster}.${node.index}`] = node.subnode;\r\n      break;\r\n  }\r\n\r\n  if (!isValidState({ nodes: newNodes, points: newPoints })) return state;\r\n  return { nodes: newNodes, points: newPoints };\r\n}\r\n\r\nexport function CalculatorProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    nodes: {},\r\n    points: {\r\n      force: 0,\r\n      entropy: 0,\r\n      form: 0,\r\n      inertia: 0,\r\n      life: 0,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <CalculatorContext.Provider value={{ state, dispatch }}>{children}</CalculatorContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { CalculatorContext, embodimentNames, clusters } from './CalculatorContext';\r\n\r\nconst VALUE_MODIFIER_REGEX = /^\\+([\\d.]+)(.*)/;\r\n\r\nconst categories = [\r\n  {\r\n    header: 'Attributes',\r\n    regex: /^\\+\\d+(% invested)? (strength|constitution|power|finesse|wits|memory)\\./,\r\n  },\r\n  {\r\n    header: 'Skills',\r\n    regex: /^\\+\\d+ (ranged|single-handed|two-handed|leadership|perseverance|retribution|aerotheurge|geomancer|huntsman|hydrosophist|necromancer|polymorph|pyrokinetic|scoundrel|summoning|warfare|sourcery)\\./,\r\n  },\r\n  {\r\n    header: 'Stats',\r\n    regex: /^\\+[\\d.]+%? (initiative|critical chance|accuracy|damage|movement speed|lifesteal|maximum vitality|dodge chance)\\./,\r\n  },\r\n  {\r\n    header: 'Resistances',\r\n    regex: /^\\+\\d+% ((water|fire|air|earth|poison|physical|piercing) resistance|to elemental resistances)\\./,\r\n  },\r\n  {\r\n    header: 'Summons',\r\n    regex: /^\\+[\\d.]+%? summon \\w+( \\w+)?\\./,\r\n  },\r\n  {\r\n    header: 'Embodiments',\r\n    regex: /^\\+\\d+ (force|entropy|form|inertia|life)\\./,\r\n  },\r\n];\r\n\r\nexport function Overview() {\r\n  const calculator = useContext(CalculatorContext);\r\n  const state = calculator.state;\r\n\r\n  const points = [];\r\n  for (let embodiment of embodimentNames) {\r\n    points.push(<div className={`point ${embodiment}`}>{calculator.state.points[embodiment]}</div>);\r\n  }\r\n\r\n  const valueModifiers = {};\r\n  const textModifiers = [];\r\n\r\n  function addModifier(line) {\r\n    line\r\n      .split('\\n» ')\r\n      .map((s) => s.trim())\r\n      .forEach((modifier) => {\r\n        let match = modifier.match(VALUE_MODIFIER_REGEX);\r\n        if (match) {\r\n          const description = match[2];\r\n          const value = Number(match[1]);\r\n          valueModifiers[description] = (valueModifiers[description] || 0) + value;\r\n        } else {\r\n          textModifiers.push(modifier);\r\n        }\r\n      });\r\n  }\r\n\r\n  for (let nodeId in state.nodes) {\r\n    let [cluster, index] = nodeId.split('.');\r\n\r\n    const node = clusters[cluster].nodes[index];\r\n    const subnode = state.nodes[nodeId];\r\n\r\n    const modifier = node.description.trim();\r\n\r\n    if (modifier) addModifier(modifier);\r\n    if (subnode != -1) {\r\n      addModifier(node.subnodes[subnode]);\r\n    }\r\n  }\r\n\r\n  const modifiers = [];\r\n\r\n  for (let description of Object.keys(valueModifiers)) {\r\n    let value = valueModifiers[description];\r\n    modifiers.push(`+${Math.round(value * 10) / 10}${description}`);\r\n  }\r\n\r\n  modifiers.push(...textModifiers);\r\n\r\n  let modifiersByCategory = categories.map((c) => []);\r\n  const otherModifiers = [];\r\n\r\n  for (let modifier of modifiers) {\r\n    let hasCategory = false;\r\n\r\n    for (let i = 0; i < categories.length; i++) {\r\n      const category = categories[i];\r\n\r\n      if (modifier.toLowerCase().match(category.regex)) {\r\n        hasCategory = true;\r\n        modifiersByCategory[i].push(modifier);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!hasCategory) {\r\n      otherModifiers.push(modifier);\r\n    }\r\n  }\r\n\r\n  const categoryElements = [];\r\n  for (let i = 0; i < categories.length; i++) {\r\n    const category = categories[i];\r\n    if (modifiersByCategory[i].length) {\r\n      categoryElements.push(\r\n        <div className=\"category\">\r\n          <div className=\"category-header\">{category.header}:</div>\r\n          {modifiersByCategory[i].map((m) => (\r\n            <div>{m}</div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (otherModifiers.length) {\r\n    categoryElements.push(\r\n      <div className=\"category\">\r\n        <div className=\"category-header\">Other bonuses:</div>\r\n        {otherModifiers.map((m) => (\r\n          <div>{m}</div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"overview\">\r\n      <div className=\"total-points points\">\r\n        <div className=\"points-name\">Available Ascension:</div> {points}\r\n      </div>\r\n      <div className=\"points-used\">Points used: {Object.keys(state.nodes).length}</div>\r\n\r\n      <div className=\"description\">\r\n        <div className=\"description-title\">Bonuses overview:</div>\r\n        {categoryElements}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport classNames from 'classnames';\r\nimport {\r\n  CalculatorContext,\r\n  isNodeSelectable,\r\n  isNodeSelected,\r\n  getSelectedSubnode,\r\n  clusters,\r\n} from './CalculatorContext';\r\n\r\nconst BONUS_REGEX = /\\+1 (Force|Entropy|Form|Inertia|Life)./;\r\n\r\nexport function Node(props) {\r\n  const calculator = useContext(CalculatorContext);\r\n  const isSelected = isNodeSelected(props, calculator.state.nodes);\r\n  const isSelectable = !isSelected && isNodeSelectable(props, calculator.state);\r\n  const selectedSubnode = isSelected && getSelectedSubnode(props, calculator.state.nodes);\r\n  const node = clusters[props.cluster].nodes[props.index];\r\n\r\n  function onClick(subnode) {\r\n    let bonusPoint;\r\n\r\n    let match = node.description.match(BONUS_REGEX);\r\n    if (subnode != -1 && !match) match = node.subnodes[subnode].match(BONUS_REGEX);\r\n    if (match) bonusPoint = match[1].toLowerCase();\r\n\r\n    if (!isSelected) {\r\n      calculator.dispatch({\r\n        type: 'select',\r\n        node: { subnode, bonusPoint, ...props },\r\n      });\r\n    } else {\r\n      if (subnode != -1 && subnode != selectedSubnode) {\r\n        let prevBonusPoint;\r\n        let match = node.subnodes[selectedSubnode].match(BONUS_REGEX);\r\n        if (match) prevBonusPoint = match[1].toLowerCase();\r\n\r\n        calculator.dispatch({\r\n          type: 'reselect',\r\n          node: { subnode, bonusPoint, prevBonusPoint, ...props },\r\n        });\r\n      } else {\r\n        calculator.dispatch({\r\n          type: 'deselect',\r\n          node: { bonusPoint, ...props },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const tooltip = [];\r\n  if (node.description.trim()) tooltip.push(node.description.trim());\r\n\r\n  if (node.subnodes && node.subnodes.length) {\r\n    const subnodes = [];\r\n    for (let i = 0; i < node.subnodes.length; i++) {\r\n      tooltip.push(`${i + 1}) ${node.subnodes[i].trim()}`);\r\n      subnodes.push(\r\n        <div\r\n          className={classNames('subnode', { selected: isSelected && selectedSubnode == i })}\r\n          onClick={onClick.bind(this, i)}\r\n        >\r\n          {i + 1}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        data-tip={tooltip.join('<br />').replace(/\\n/g, '<br/>')}\r\n        className={classNames('node subnodes', { selected: isSelected, selectable: isSelectable })}\r\n      >\r\n        {subnodes}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      data-tip={tooltip.join('<br />').replace(/\\n/g, '<br/>')}\r\n      className={classNames('node', { selected: isSelected, selectable: isSelectable })}\r\n      onClick={onClick.bind(this, -1)}\r\n    ></div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Node } from './Node';\r\nimport {\r\n  CalculatorContext,\r\n  isClusterAvailable,\r\n  isClusterComplete,\r\n  clusters,\r\n} from './CalculatorContext';\r\n\r\nexport function Cluster(props) {\r\n  const nodes = [];\r\n  const cluster = clusters[props.name];\r\n  const calculator = useContext(CalculatorContext);\r\n  const isAvailable = isClusterAvailable(cluster, calculator.state);\r\n  const isComplete = isAvailable && isClusterComplete(cluster, calculator.state.nodes);\r\n\r\n  const requirements = [];\r\n  for (let embodiment in cluster.requirements) {\r\n    requirements.push(\r\n      <div className={`point ${embodiment}`}>{cluster.requirements[embodiment]}</div>\r\n    );\r\n  }\r\n\r\n  const rewards = [];\r\n  for (let embodiment in cluster.rewards) {\r\n    rewards.push(<div className={`point ${embodiment}`}>{cluster.rewards[embodiment]}</div>);\r\n  }\r\n\r\n  for (let i = 0; i < cluster.nodes.length; i++) {\r\n    nodes.push(<Node cluster={props.name} index={i} />);\r\n  }\r\n\r\n  return (\r\n    <div className={classNames('cluster', { available: isAvailable, complete: isComplete })}>\r\n      <div className=\"requirements points\">{requirements}</div>\r\n      <div className=\"cluster-name\"> {props.name} </div>\r\n      <div className=\"rewards points\">{rewards}</div>\r\n      <div className=\"nodes\">{nodes}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Node } from './Node';\r\nimport { Cluster } from './Cluster';\r\nimport { embodiments } from './CalculatorContext';\r\n\r\nexport function Embodiment(props) {\r\n  const clusters = [];\r\n  const embodiment = embodiments[props.name];\r\n\r\n  for (let cluster of embodiment) {\r\n    clusters.push(<Cluster name={cluster.name} />);\r\n  }\r\n\r\n  return (\r\n    <div className=\"embodiment\">\r\n      <div className=\"embodiment-name\">\r\n        {props.name}\r\n        <Node cluster=\"root\" index={props.name} />\r\n      </div>\r\n      <div className=\"clusters\">{clusters}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Overview } from './Overview';\nimport { Embodiment } from './Embodiment';\nimport ReactTooltip from 'react-tooltip';\nimport { CalculatorProvider, embodimentNames } from './CalculatorContext';\n\nfunction App() {\n  return (\n    <CalculatorProvider>\n      <div className=\"calculator\">\n        <div className=\"embodiments\">\n          {embodimentNames.map((embodiment) => (\n            <Embodiment name={embodiment} />\n          ))}\n        </div>\n        <Overview />\n      </div>\n      <ReactTooltip className=\"tooltip\" effect=\"solid\" multiline=\"true\" />\n    </CalculatorProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}